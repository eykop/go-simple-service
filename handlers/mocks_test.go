// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/eykop/simplems/data/products.go

// Package handlers_test is a generated GoMock package.
package handlers_test

import (
	io "io"
	reflect "reflect"
	data "simplems/data"

	gomock "github.com/golang/mock/gomock"
)

// MockProductInterface is a mock of ProductInterface interface.
type MockProductInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductInterfaceMockRecorder
}

// MockProductInterfaceMockRecorder is the mock recorder for MockProductInterface.
type MockProductInterfaceMockRecorder struct {
	mock *MockProductInterface
}

// NewMockProductInterface creates a new mock instance.
func NewMockProductInterface(ctrl *gomock.Controller) *MockProductInterface {
	mock := &MockProductInterface{ctrl: ctrl}
	mock.recorder = &MockProductInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductInterface) EXPECT() *MockProductInterfaceMockRecorder {
	return m.recorder
}

// FromJson mocks base method.
func (m *MockProductInterface) FromJson(r io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromJson", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// FromJson indicates an expected call of FromJson.
func (mr *MockProductInterfaceMockRecorder) FromJson(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromJson", reflect.TypeOf((*MockProductInterface)(nil).FromJson), r)
}

// GetID mocks base method.
func (m *MockProductInterface) GetID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockProductInterfaceMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockProductInterface)(nil).GetID))
}

// SetID mocks base method.
func (m *MockProductInterface) SetID(id int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetID", id)
}

// SetID indicates an expected call of SetID.
func (mr *MockProductInterfaceMockRecorder) SetID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockProductInterface)(nil).SetID), id)
}

// ToJson mocks base method.
func (m *MockProductInterface) ToJson(w io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToJson", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToJson indicates an expected call of ToJson.
func (mr *MockProductInterfaceMockRecorder) ToJson(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToJson", reflect.TypeOf((*MockProductInterface)(nil).ToJson), w)
}

// UpdateProduct mocks base method.
func (m *MockProductInterface) UpdateProduct(updated data.ProductInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateProduct", updated)
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductInterfaceMockRecorder) UpdateProduct(updated interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductInterface)(nil).UpdateProduct), updated)
}

// Validate mocks base method.
func (m *MockProductInterface) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockProductInterfaceMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockProductInterface)(nil).Validate))
}

// MockProductsInterface is a mock of ProductsInterface interface.
type MockProductsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductsInterfaceMockRecorder
}

// MockProductsInterfaceMockRecorder is the mock recorder for MockProductsInterface.
type MockProductsInterfaceMockRecorder struct {
	mock *MockProductsInterface
}

// NewMockProductsInterface creates a new mock instance.
func NewMockProductsInterface(ctrl *gomock.Controller) *MockProductsInterface {
	mock := &MockProductsInterface{ctrl: ctrl}
	mock.recorder = &MockProductsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsInterface) EXPECT() *MockProductsInterfaceMockRecorder {
	return m.recorder
}

// AddPorduct mocks base method.
func (m *MockProductsInterface) AddPorduct(p data.ProductInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPorduct", p)
}

// AddPorduct indicates an expected call of AddPorduct.
func (mr *MockProductsInterfaceMockRecorder) AddPorduct(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPorduct", reflect.TypeOf((*MockProductsInterface)(nil).AddPorduct), p)
}

// Count mocks base method.
func (m *MockProductsInterface) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockProductsInterfaceMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockProductsInterface)(nil).Count))
}

// DeleteProduct mocks base method.
func (m *MockProductsInterface) DeleteProduct(index int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", index)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductsInterfaceMockRecorder) DeleteProduct(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductsInterface)(nil).DeleteProduct), index)
}

// GetNextProductId mocks base method.
func (m *MockProductsInterface) GetNextProductId() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextProductId")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetNextProductId indicates an expected call of GetNextProductId.
func (mr *MockProductsInterfaceMockRecorder) GetNextProductId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextProductId", reflect.TypeOf((*MockProductsInterface)(nil).GetNextProductId))
}

// GetProductByIndex mocks base method.
func (m *MockProductsInterface) GetProductByIndex(index int) data.ProductInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByIndex", index)
	ret0, _ := ret[0].(data.ProductInterface)
	return ret0
}

// GetProductByIndex indicates an expected call of GetProductByIndex.
func (mr *MockProductsInterfaceMockRecorder) GetProductByIndex(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByIndex", reflect.TypeOf((*MockProductsInterface)(nil).GetProductByIndex), index)
}

// GetProductIndexById mocks base method.
func (m *MockProductsInterface) GetProductIndexById(id int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductIndexById", id)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetProductIndexById indicates an expected call of GetProductIndexById.
func (mr *MockProductsInterfaceMockRecorder) GetProductIndexById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductIndexById", reflect.TypeOf((*MockProductsInterface)(nil).GetProductIndexById), id)
}

// GetProductsList mocks base method.
func (m *MockProductsInterface) GetProductsList() *data.ProductsList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsList")
	ret0, _ := ret[0].(*data.ProductsList)
	return ret0
}

// GetProductsList indicates an expected call of GetProductsList.
func (mr *MockProductsInterfaceMockRecorder) GetProductsList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsList", reflect.TypeOf((*MockProductsInterface)(nil).GetProductsList))
}

// ToJson mocks base method.
func (m *MockProductsInterface) ToJson(w io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToJson", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToJson indicates an expected call of ToJson.
func (mr *MockProductsInterfaceMockRecorder) ToJson(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToJson", reflect.TypeOf((*MockProductsInterface)(nil).ToJson), w)
}

// UpdateProduct mocks base method.
func (m *MockProductsInterface) UpdateProduct(incommingProd data.ProductInterface, index int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", incommingProd, index)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductsInterfaceMockRecorder) UpdateProduct(incommingProd, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductsInterface)(nil).UpdateProduct), incommingProd, index)
}
