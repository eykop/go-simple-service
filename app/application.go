package app

import (
	"context"
	"net/http"
	_ "simplems/docs" // docs is generated by Swag CLI, you have to import it.
	"simplems/handlers"
	"simplems/middlewares"
	"time"

	openapiMiddleware "github.com/go-openapi/runtime/middleware"
	"github.com/gorilla/mux"
	httpSwagger "github.com/swaggo/http-swagger"
	"go.uber.org/zap"
)

type application struct {
	Router *mux.Router
	server *http.Server
	logger *zap.Logger
}

func NewApplication(logger *zap.Logger) *application {
	router := mux.NewRouter()
	healthCheckHandler := handlers.NewHealthCheck(logger)
	productsHandler := handlers.NewProducts(logger)
	psr := router.PathPrefix("/products").Subrouter()
	psr.Use(middlewares.LoggingMiddleware(logger), middlewares.DecodeProductMiddleware(logger))
	psr.HandleFunc("/", productsHandler.ListProducts).Methods(http.MethodGet)
	psr.HandleFunc("/", productsHandler.CreateProduct).Methods(http.MethodPost)
	psr.HandleFunc("/{id:[0-9]+}/", productsHandler.UpdateProduct).Methods(http.MethodPut)
	psr.HandleFunc("/{id:[0-9]+}/", productsHandler.GetProduct).Methods(http.MethodGet)
	psr.HandleFunc("/{id:[0-9]+}/", productsHandler.DeleteProduct).Methods(http.MethodDelete)
	router.Handle("/ping", healthCheckHandler)

	// Swagger docs and redocs
	router.PathPrefix("/docs/").Handler(httpSwagger.Handler(
		httpSwagger.DocExpansion("none"),
	)).Methods(http.MethodGet)

	// handler for documentation
	opts := openapiMiddleware.RedocOpts{SpecURL: "/docs/doc.json", Path: "redocs"}
	sh := openapiMiddleware.Redoc(opts, nil)
	router.PathPrefix("/redocs").Handler(sh).Methods(http.MethodGet)
	return &application{Router: router, logger: logger}
}

func (a *application) Start() {

	a.server = &http.Server{
		Addr:         ":3000",
		Handler:      a.Router,
		IdleTimeout:  120 * time.Second,
		ReadTimeout:  1 * time.Second,
		WriteTimeout: 1 * time.Second,
	}
	err := a.server.ListenAndServe()
	if err != nil {
		a.logger.Fatal("Fatal error occured", zap.Error(err))
	}
}

func (a *application) Shutdown(ctx context.Context) {
	a.server.Shutdown(ctx)
}
