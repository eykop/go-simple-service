package main

import (
	"context"
	"net/http"
	"os"
	"os/signal"
	_ "simplems/docs" // docs is generated by Swag CLI, you have to import it.
	"simplems/handlers"
	"simplems/middlewares"
	"syscall"
	"time"

	openapiMiddleware "github.com/go-openapi/runtime/middleware"
	"github.com/gorilla/mux"
	httpSwagger "github.com/swaggo/http-swagger"
	"go.uber.org/zap"
)

// @title          Swagger Products API
// @version        1.0
// @description    This is a sample Products server.
// @termsOfService http://swagger.io/terms/

// @contact.name  API Support
// @contact.url   http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url  http://www.apache.org/licenses/LICENSE-2.0.html

// @host     localhost:3000
// @BasePath /
func main() {
	logger, _ := zap.NewDevelopment()

	defer logger.Sync()
	healthCheckHandler := handlers.NewHealthCheck(logger)
	productsHandler := handlers.NewProducts(logger)
	router := mux.NewRouter()
	psr := router.PathPrefix("/products").Subrouter()
	psr.Use(middlewares.LoggingMiddleware(logger), middlewares.DecodeProductMiddleware(logger))
	psr.HandleFunc("/", productsHandler.ListProducts).Methods(http.MethodGet)
	psr.HandleFunc("/", productsHandler.CreateProduct).Methods(http.MethodPost)
	psr.HandleFunc("/{id:[0-9]+}/", productsHandler.UpdateProduct).Methods(http.MethodPut)
	psr.HandleFunc("/{id:[0-9]+}/", productsHandler.GetProduct).Methods(http.MethodGet)
	psr.HandleFunc("/{id:[0-9]+}/", productsHandler.DeleteProduct).Methods(http.MethodDelete)
	router.Handle("/ping", healthCheckHandler)

	// Swagger docs and redocs
	router.PathPrefix("/docs/").Handler(httpSwagger.Handler(
		httpSwagger.DocExpansion("none"),
	)).Methods(http.MethodGet)

	// handler for documentation
	opts := openapiMiddleware.RedocOpts{SpecURL: "/docs/doc.json", Path: "redocs"}
	sh := openapiMiddleware.Redoc(opts, nil)
	router.PathPrefix("/redocs").Handler(sh).Methods(http.MethodGet)

	server := &http.Server{
		Addr:         ":3000",
		Handler:      router,
		IdleTimeout:  120 * time.Second,
		ReadTimeout:  1 * time.Second,
		WriteTimeout: 1 * time.Second,
	}

	// anonymouse go routine which runs concurrently in the backgroun!
	go func() {
		err := server.ListenAndServe()
		if err != nil {
			logger.Fatal("Fatal error occured", zap.Error(err))
		}
	}()

	notifyChannel := make(chan os.Signal, 1)
	signal.Notify(notifyChannel, os.Interrupt, syscall.SIGTERM)

	// block untill signal is recieved
	signal := <-notifyChannel
	logger.Info("Gracefully Shutting down...", zap.String("reason", signal.String()))

	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	server.Shutdown(ctx)
}
